<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhouhan760503.github.io</id>
    <title>土豆前端奇遇记</title>
    <updated>2021-03-19T07:44:40.746Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhouhan760503.github.io"/>
    <link rel="self" href="https://zhouhan760503.github.io/atom.xml"/>
    <subtitle>土豆种植中</subtitle>
    <logo>https://zhouhan760503.github.io/images/avatar.png</logo>
    <icon>https://zhouhan760503.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 土豆前端奇遇记</rights>
    <entry>
        <title type="html"><![CDATA[Express学习笔记<2>——mongodb]]></title>
        <id>https://zhouhan760503.github.io/post/express-xue-xi-bi-ji-less2greater-lian-jie-mongodb/</id>
        <link href="https://zhouhan760503.github.io/post/express-xue-xi-bi-ji-less2greater-lian-jie-mongodb/">
        </link>
        <updated>2020-12-30T02:15:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是mongodb">什么是mongodb</h2>
<p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。<br>
在高负载的情况下，添加更多的节点，可以保证服务器性能。<br>
MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。<br>
MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>
<h2 id="mac环境下安装mongodb">Mac环境下安装mongodb</h2>
<p>提供两种方法</p>
<ol>
<li>官网手动下载<br>
官网地址：https://www.mongodb.com/try/download/community，下载本地版MongoDb，格式为tgz。<br>
把解压后的文件夹放到 /usr/local 下<br>
执行</li>
</ol>
<p>open -e .bash_profile<br>
配置环境变量，文件中加入</p>
<p>export PATH=${PATH}:/usr/local/mongodb-macos-x86_64-4.4.1/bin<br>
保存后关闭文件，执行以下命令使环境变量生效</p>
<p>source .bash_profile<br>
执行 mongod -version ，出现如下信息则证明安装成功<br>
<img src="https://zhouhan760503.github.io/post-images/1609294958241.png" alt="" loading="lazy"></p>
<ol start="2">
<li>homebrew自动安装<br>
直接通过brew install mongodb的方式已经不能够成功安装mongodb，原因是MongoDB已经宣布不再开源，从2019年9月2日开始 ，HomeBrew也从核心仓库 (#43770) 当中移除了mongodb模块<br>
（宿舍的校园网本来就brew得慢，折腾了一晚上结果白给）<br>
不过想要继续使用 brew install mongodb 也是可以的，MongoDB 官方提供了一个单独的 HomeBrew 的社区版本安装：https://github.com/mongodb/homebrew-brew 。<br>
接下来就参考这个 github 项目的介绍<br>
先执行 brew tap mongodb/brew ；<br>
成功后再执行 brew install <formula> 即可；<br>
我在这里直接安装默认的社区版本，执行：brew install mongodb-community 也可以参考文档安装指定的版本；<br>
这个 brew tap 的源无法加速，是从 mongodb.org 官方下载的安装包，所以需要多耐心等待一下，如果下载失败，多尝试几次便可安装成功。<br>
顺便贴一下安装成功后几个默认配置文件的目录，引用自 mongodb/homebrew-brew<br>
Default Paths for the mongodb-community Formula</li>
</ol>
<p>In addition to installing the MongoDB server and tool binaries, the mongodb-community formula creates:</p>
<p>a configuration file: /usr/local/etc/mongod.conf<br>
a log directory path: /usr/local/var/log/mongodb<br>
a data directory path: /usr/local/var/mongodb<br>
（参考自——https://www.jianshu.com/p/8db0b29a931d）</p>
<h2 id="在express中使用mongodb">在express中使用mongodb</h2>
<p><img src="https://zhouhan760503.github.io/post-images/1609376808807.png" alt="" loading="lazy"><br>
Nodejs操作mongodb需要依赖第三方包mongoose，使用npm install mongoose进行下载即可，Mongoose是在node.js异步环境下对mongodb进行便捷操作的对象模型工具<br>
如上图，需要先引入第三方模块，require('mongoose')才能进行连接。<br>
之后connect时url填写想要存放的数据库具体的collection<br>
在MongoDB中不需要显式创建数据库，如果正在使用的数据库不存在，MongoDB会自动创建<br>
可以在成功创建连接数据库时打印信息<br>
出现如下图情况，说明连接数据库成功<br>
<img src="https://zhouhan760503.github.io/post-images/1609377239938.png" alt="" loading="lazy"></p>
<h2 id="mongoose的使用">mongoose的使用</h2>
<p>mongoose提供很多mongodb的操作，但在这次作业中我只用到了两个，查询和插入。mongoose是基于对象模型来进行操作的。<br>
schema是mongoose里用到的一种数据模式，可以理解为表结构的定义；每个schema会映射到mongodb中的一个collection，它不具备操作数据库的能力<br>
model是由schema生成的模型，可以对数据库的操作<br>
如下图，生成了一个Account的model<br>
<img src="https://zhouhan760503.github.io/post-images/1609377569113.png" alt="" loading="lazy"><br>
导出这个model，并且可以同时命名他的别名，之后就可以通过模型进行数据库的操作了</p>
<ol>
<li>查询<br>
查询是通过模型类进行操作的（以为是通过生成的模型对象进行操作，又白给了一段时间）<br>
我这里只是用了find操作，作用是找到所有包含目标字段的数据<br>
<img src="https://zhouhan760503.github.io/post-images/1609377745388.png" alt="" loading="lazy"><br>
其他操作可以查看<br>
http://mongoosejs.net/docs/api.html#Model</li>
<li>插入<br>
插入是基于new的model对象来操作的<br>
<img src="https://zhouhan760503.github.io/post-images/1609377931715.png" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Express学习笔记<1>——Router]]></title>
        <id>https://zhouhan760503.github.io/post/express-xue-xi-bi-ji-less1greater/</id>
        <link href="https://zhouhan760503.github.io/post/express-xue-xi-bi-ji-less1greater/">
        </link>
        <updated>2020-12-29T06:42:58.000Z</updated>
        <content type="html"><![CDATA[<p>Node访问页面的方法是通过路由，即url进行访问，创建路由可以通过express.Router的中间件来实现。</p>
<h2 id="什么是expressrouter">什么是express.Router</h2>
<p>express的Router是为了我们更好的根据路由来分模块，避免将所有的路由都写在入口文件中，即app.js中<br>
在express生成的app.js中，能够看到给我们初始化了两个路由<br>
<img src="https://zhouhan760503.github.io/post-images/1609224662925.png" alt="" loading="lazy"><br>
这个路由是在route文件夹下对应的js文件中export的，以index为例<br>
<img src="https://zhouhan760503.github.io/post-images/1609224759311.png" alt="" loading="lazy"><br>
因此在运行了本地的express应用后，就可以通过对应的url对内容进行访问，目前还没有涉及到具体网页的构建，只是通过请求访问了一个信息，例如访问users页面<br>
<img src="https://zhouhan760503.github.io/post-images/1609224958307.png" alt="" loading="lazy"><br>
就能够访问到对应的内容</p>
<h2 id="如何添加路由">如何添加路由</h2>
<p>在routes文件夹中新建一个分类的js文件（新建文件是为了更好区分模块，当前index.js所在的模块为根目录，即‘/’；users.js所在的模块为‘/users’，即访问这些文件中设计的内容和请求的路径）<br>
新建log.js文件，添加如下代码<br>
<img src="https://zhouhan760503.github.io/post-images/1609225202904.png" alt="" loading="lazy"></p>
<p>在app.js中引用log.js文件导出的router<br>
<img src="https://zhouhan760503.github.io/post-images/1609225275475.png" alt="" loading="lazy"><br>
就可以通过localhost:端口号（一般为3000）/user中的模块访问到当前设置的路由模块，即/log模块，如下图<br>
<img src="https://zhouhan760503.github.io/post-images/1609225389340.png" alt="" loading="lazy"></p>
<p>路函数有三个参数，分别问req，res，next<br>
req：http请求对象<br>
res：http响应<br>
next：中间件链中的下一个函数，可以根据需要制定任意数量的回调函数或一个回调函数组，并且只会按添加顺序调用。</p>
<h2 id="创建路由处理回调函数">创建路由处理回调函数</h2>
<p>除了在routes文件中定义路由的回调函数外，可以创建controller文件定义回调函数，在route文件中引用，便于管理。<br>
创建log的controller文件并创建回调函数：<br>
<img src="https://zhouhan760503.github.io/post-images/1609225708059.png" alt="" loading="lazy"><br>
在log.js文件中进行引用<br>
<img src="https://zhouhan760503.github.io/post-images/1609225772839.png" alt="" loading="lazy"><br>
由此可以通过route对controller文件的引用来获得controller的回调函数。目前请求地址为log模块下的根地址。效果如下：<br>
<img src="https://zhouhan760503.github.io/post-images/1609225871191.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>