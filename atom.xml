<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhouhan760503.github.io</id>
    <title>土豆前端奇遇记</title>
    <updated>2021-05-17T02:32:44.230Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhouhan760503.github.io"/>
    <link rel="self" href="https://zhouhan760503.github.io/atom.xml"/>
    <subtitle>土豆种植中</subtitle>
    <logo>https://zhouhan760503.github.io/images/avatar.png</logo>
    <icon>https://zhouhan760503.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 土豆前端奇遇记</rights>
    <entry>
        <title type="html"><![CDATA[webpack学习]]></title>
        <id>https://zhouhan760503.github.io/post/webpack-xue-xi/</id>
        <link href="https://zhouhan760503.github.io/post/webpack-xue-xi/">
        </link>
        <updated>2021-04-12T09:56:02.000Z</updated>
        <content type="html"><![CDATA[<p>[toc]<br>
webpack是js应用程序静态模块打包器，能够在处理程序时递归构建依赖关系图，然后将所有模块打包成一个或多个<em>bundle</em></p>
<h1 id="webpack的四个核心概念">webpack的四个核心概念：</h1>
<ul>
<li>
<p>入口</p>
<ul>
<li>入口（entry point）指示webpack使用那个模块来作为构建内部依赖图的开始。可以在webpack中配置entry属性，来指定一个（或多个）入口起点，默认指定为./src</li>
<li><img src="https://zhouhan760503.github.io/post-images/1618221618654.png" alt="" loading="lazy"></li>
<li>当向entry传入一个数组时，将创建多个主入口（multi-main entry）</li>
</ul>
</li>
<li>
<p>输出</p>
<ul>
<li>出口（out put）告诉webpack在那里输出他创建的bundles和如何命名这些文件，默认值为./dist，整个应用程序结构都会被编译到指定的输出路径中，可以在配置中指定一个output字段</li>
<li><img src="https://zhouhan760503.github.io/post-images/1618221732257.png" alt="" loading="lazy"></li>
<li>可以存在多个入口，但是只能存在一个出口</li>
<li>出口对象包括两个属性，filename和path
<ul>
<li>filename：用于输出文件的文件名</li>
<li>path：目标输出目录的绝对路径</li>
</ul>
</li>
<li>如果有多个入口，可以使用<a href="https://www.webpackjs.com/configuration/output/#output-filename">占位符</a>来确保文件的唯一名称</li>
</ul>
</li>
<li>
<p>loader</p>
<ul>
<li>让webpack能够处理非js文件（webpack只能理解js文件），loader将所有的文件转化成webpack能够理解的有效模块，便于之后打包；在import或者加载模块时预处理文件</li>
<li>本质上，loader将所有类型的文件，转换成应用程序的依赖图可以直接引用的模块</li>
<li>loader有两个目标
<ul>
<li>test属性，用于标识出被对应的loader进行转换的某个或某些文件</li>
<li>use属性，表示进行转换时，应该使用哪一个loader</li>
</ul>
</li>
<li>在定义rules时，要定义在module.rules中，而不是rules</li>
<li>使用时，类似于如下
<ul>
<li>嘿，webpack 编译器，当你碰到「在 require()/import 语句中被解析为 '.txt' 的路径」时，在你对它打包之前，先使用 raw-loader 转换一下</li>
</ul>
</li>
<li>有三种使用loader的方法
<ul>
<li>配置
<ul>
<li>在module.rules中配置loader</li>
<li><img src="https://zhouhan760503.github.io/post-images/1618223622129.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>内联</li>
<li><img src="https://zhouhan760503.github.io/post-images/1618223683234.png" alt="" loading="lazy"></li>
<li>CLI</li>
<li><img src="https://zhouhan760503.github.io/post-images/1618223727048.png" alt="" loading="lazy"></li>
</ul>
</li>
</ul>
</li>
<li>
<p>插件</p>
<ul>
<li>插件能够执行比loader拥有更大适用范围的任务，包括打包优化和压缩，一直到重新定义环境中的变量</li>
<li>使用时，先require，而后Tina驾到plugins数组中</li>
<li>如果需要因为不同目的使用一个插件，要使用new操作符来创建它的一个实例</li>
<li><img src="https://zhouhan760503.github.io/post-images/1618222287594.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>
<p>模式</p>
<ul>
<li>告知webpack使用相应模式的内置优化</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>development</td>
<td>会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin</td>
</tr>
<tr>
<td>production</td>
<td>会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h1 id="模块">模块</h1>
<p>模块化编程中，开发者将程序分解成列三功能快<br>
每个模块具有比完整程序更小的接触面，从而方便娇艳、调试和测试<br>
相比于node模块，webpack模块能够用多种方式表达依赖关系：</p>
<ul>
<li>ES2015 import 语句</li>
<li>CommonJS require() 语句</li>
<li>AMD define 和 require 语句</li>
<li>css/sass/less 文件中的 @import 语句。</li>
<li>样式(url(...))或 HTML 文件(<img src=...>)中的图片链接(image url)</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式<1>——面向对象设计原则]]></title>
        <id>https://zhouhan760503.github.io/post/she-ji-mo-shi-1-mian-xiang-dui-xiang-she-ji-yuan-ze/</id>
        <link href="https://zhouhan760503.github.io/post/she-ji-mo-shi-1-mian-xiang-dui-xiang-she-ji-yuan-ze/">
        </link>
        <updated>2021-03-27T05:56:05.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://zhouhan760503.github.io/post-images/1616824871468.png" alt="" loading="lazy"></figure>
<p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解<br>
目的：降低对象之间的耦合，增加程序的可复用性、可扩展性和可维护性</p>
<ol>
<li>
<p>开闭原则<br>
软件应当对扩展开放，对修改关闭<br>
——当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。</p>
<p>可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。</p>
</li>
<li>
<p>里氏替换原则<br>
继承必须确保超类所拥有的性质在子类中仍然成立<br>
——子类可以扩展父类的功能，但不能改变父类原有的功能<br>
——子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法</p>
<ul>
<li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</li>
<li>子类中可以增加自己特有的方法</li>
<li>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松</li>
<li>当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的的输出/返回值）要比父类的方法更严格或相等</li>
</ul>
</li>
<li>
<p>依赖倒置原则<br>
高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象<br>
——要面向接口编程，不要面向实现编程</p>
<p>作用</p>
<ul>
<li>降低类之间的耦合性</li>
<li>提高系统的稳定性</li>
<li>减少并行开发引起的风险</li>
<li>提高代码的可读性和可维护性</li>
</ul>
<p>如何满足</p>
<ul>
<li>每个累尽量提供接口或抽象类</li>
<li>变量的声明类型尽量是接口或者抽象类</li>
<li>任何类都不应该从具体类派生</li>
<li>使用时尽量遵循里氏替换原则</li>
</ul>
</li>
<li>
<p>单一职责原则<br>
一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分</p>
<p>作用</p>
<ul>
<li>降低类的复杂度</li>
<li>提高类的可读性</li>
<li>提高系统的可维护性</li>
<li>变更引起的风险降低</li>
</ul>
</li>
<li>
<p>接口隔离原则<br>
客户端不应该被迫依赖于它不使用的方法<br>
——要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用</p>
<p>优点</p>
<ul>
<li>预防外来变更的扩散，提高系统的灵活性和可维护性</li>
<li>提高系统的内聚性，减少对外交互，降低系统的耦合性</li>
<li>如果粒度大小合理，能够保证系统的稳定性；如果定义过小，接口数量过多，设计复杂；如果定义过大，灵活性降低，带来不可预料的风险</li>
<li>体现对象的层次，通过接口继承体现总接口</li>
<li>减少代码冗余</li>
</ul>
<p>实现</p>
<ul>
<li>接口有限度的小</li>
<li>为依赖接口的类定制服务、了解环境</li>
<li>提高内聚，减少对外交互</li>
</ul>
</li>
<li>
<p>迪米特法则<br>
最少知识原则<br>
如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用——降低类之间的耦合度，提高模块的相对独立性</p>
<p>优点</p>
<ul>
<li>降低类的耦合度，提高模块的相对独立性</li>
<li>提高类的可复用率和系统的扩展性</li>
</ul>
<p>实现</p>
<ul>
<li>在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标</li>
<li>在类的结构设计上，尽量降低类成员的访问权限</li>
<li>在类的设计上，优先考虑将一个类设置成不变类</li>
<li>在对其他类的引用上，将引用其他对象的次数降到最低</li>
<li>不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）</li>
<li>谨慎使用序列化（Serializable）功能</li>
</ul>
</li>
<li>
<p>合成复用原则<br>
在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现<br>
如果要使用继承关系，要严格遵循里氏替换原则</p>
<p>继承的缺点</p>
<ul>
<li>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用</li>
<li>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。</li>
<li>它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化</li>
</ul>
<p>组合/聚合的优点</p>
<ul>
<li>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用</li>
<li>新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口</li>
<li>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Express学习笔记<2>——mongodb]]></title>
        <id>https://zhouhan760503.github.io/post/express-xue-xi-bi-ji-less2greater-lian-jie-mongodb/</id>
        <link href="https://zhouhan760503.github.io/post/express-xue-xi-bi-ji-less2greater-lian-jie-mongodb/">
        </link>
        <updated>2020-12-30T02:15:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是mongodb">什么是mongodb</h2>
<p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。<br>
在高负载的情况下，添加更多的节点，可以保证服务器性能。<br>
MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。<br>
MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>
<h2 id="mac环境下安装mongodb">Mac环境下安装mongodb</h2>
<p>提供两种方法</p>
<ol>
<li>官网手动下载<br>
官网地址：https://www.mongodb.com/try/download/community，下载本地版MongoDb，格式为tgz。<br>
把解压后的文件夹放到 /usr/local 下<br>
执行</li>
</ol>
<p>open -e .bash_profile<br>
配置环境变量，文件中加入</p>
<p>export PATH=${PATH}:/usr/local/mongodb-macos-x86_64-4.4.1/bin<br>
保存后关闭文件，执行以下命令使环境变量生效</p>
<p>source .bash_profile<br>
执行 mongod -version ，出现如下信息则证明安装成功<br>
<img src="https://zhouhan760503.github.io/post-images/1609294958241.png" alt="" loading="lazy"></p>
<ol start="2">
<li>homebrew自动安装<br>
直接通过brew install mongodb的方式已经不能够成功安装mongodb，原因是MongoDB已经宣布不再开源，从2019年9月2日开始 ，HomeBrew也从核心仓库 (#43770) 当中移除了mongodb模块<br>
（宿舍的校园网本来就brew得慢，折腾了一晚上结果白给）<br>
不过想要继续使用 brew install mongodb 也是可以的，MongoDB 官方提供了一个单独的 HomeBrew 的社区版本安装：https://github.com/mongodb/homebrew-brew 。<br>
接下来就参考这个 github 项目的介绍<br>
先执行 brew tap mongodb/brew ；<br>
成功后再执行 brew install <formula> 即可；<br>
我在这里直接安装默认的社区版本，执行：brew install mongodb-community 也可以参考文档安装指定的版本；<br>
这个 brew tap 的源无法加速，是从 mongodb.org 官方下载的安装包，所以需要多耐心等待一下，如果下载失败，多尝试几次便可安装成功。<br>
顺便贴一下安装成功后几个默认配置文件的目录，引用自 mongodb/homebrew-brew<br>
Default Paths for the mongodb-community Formula</li>
</ol>
<p>In addition to installing the MongoDB server and tool binaries, the mongodb-community formula creates:</p>
<p>a configuration file: /usr/local/etc/mongod.conf<br>
a log directory path: /usr/local/var/log/mongodb<br>
a data directory path: /usr/local/var/mongodb<br>
（参考自——https://www.jianshu.com/p/8db0b29a931d）</p>
<h2 id="在express中使用mongodb">在express中使用mongodb</h2>
<p><img src="https://zhouhan760503.github.io/post-images/1609376808807.png" alt="" loading="lazy"><br>
Nodejs操作mongodb需要依赖第三方包mongoose，使用npm install mongoose进行下载即可，Mongoose是在node.js异步环境下对mongodb进行便捷操作的对象模型工具<br>
如上图，需要先引入第三方模块，require('mongoose')才能进行连接。<br>
之后connect时url填写想要存放的数据库具体的collection<br>
在MongoDB中不需要显式创建数据库，如果正在使用的数据库不存在，MongoDB会自动创建<br>
可以在成功创建连接数据库时打印信息<br>
出现如下图情况，说明连接数据库成功<br>
<img src="https://zhouhan760503.github.io/post-images/1609377239938.png" alt="" loading="lazy"></p>
<h2 id="mongoose的使用">mongoose的使用</h2>
<p>mongoose提供很多mongodb的操作，但在这次作业中我只用到了两个，查询和插入。mongoose是基于对象模型来进行操作的。<br>
schema是mongoose里用到的一种数据模式，可以理解为表结构的定义；每个schema会映射到mongodb中的一个collection，它不具备操作数据库的能力<br>
model是由schema生成的模型，可以对数据库的操作<br>
如下图，生成了一个Account的model<br>
<img src="https://zhouhan760503.github.io/post-images/1609377569113.png" alt="" loading="lazy"><br>
导出这个model，并且可以同时命名他的别名，之后就可以通过模型进行数据库的操作了</p>
<ol>
<li>查询<br>
查询是通过模型类进行操作的（以为是通过生成的模型对象进行操作，又白给了一段时间）<br>
我这里只是用了find操作，作用是找到所有包含目标字段的数据<br>
<img src="https://zhouhan760503.github.io/post-images/1609377745388.png" alt="" loading="lazy"><br>
其他操作可以查看<br>
http://mongoosejs.net/docs/api.html#Model</li>
<li>插入<br>
插入是基于new的model对象来操作的<br>
<img src="https://zhouhan760503.github.io/post-images/1609377931715.png" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Express学习笔记<1>——Router]]></title>
        <id>https://zhouhan760503.github.io/post/express-xue-xi-bi-ji-less1greater/</id>
        <link href="https://zhouhan760503.github.io/post/express-xue-xi-bi-ji-less1greater/">
        </link>
        <updated>2020-12-29T06:42:58.000Z</updated>
        <content type="html"><![CDATA[<p>Node访问页面的方法是通过路由，即url进行访问，创建路由可以通过express.Router的中间件来实现。</p>
<h2 id="什么是expressrouter">什么是express.Router</h2>
<p>express的Router是为了我们更好的根据路由来分模块，避免将所有的路由都写在入口文件中，即app.js中<br>
在express生成的app.js中，能够看到给我们初始化了两个路由<br>
<img src="https://zhouhan760503.github.io/post-images/1609224662925.png" alt="" loading="lazy"><br>
这个路由是在route文件夹下对应的js文件中export的，以index为例<br>
<img src="https://zhouhan760503.github.io/post-images/1609224759311.png" alt="" loading="lazy"><br>
因此在运行了本地的express应用后，就可以通过对应的url对内容进行访问，目前还没有涉及到具体网页的构建，只是通过请求访问了一个信息，例如访问users页面<br>
<img src="https://zhouhan760503.github.io/post-images/1609224958307.png" alt="" loading="lazy"><br>
就能够访问到对应的内容</p>
<h2 id="如何添加路由">如何添加路由</h2>
<p>在routes文件夹中新建一个分类的js文件（新建文件是为了更好区分模块，当前index.js所在的模块为根目录，即‘/’；users.js所在的模块为‘/users’，即访问这些文件中设计的内容和请求的路径）<br>
新建log.js文件，添加如下代码<br>
<img src="https://zhouhan760503.github.io/post-images/1609225202904.png" alt="" loading="lazy"></p>
<p>在app.js中引用log.js文件导出的router<br>
<img src="https://zhouhan760503.github.io/post-images/1609225275475.png" alt="" loading="lazy"><br>
就可以通过localhost:端口号（一般为3000）/user中的模块访问到当前设置的路由模块，即/log模块，如下图<br>
<img src="https://zhouhan760503.github.io/post-images/1609225389340.png" alt="" loading="lazy"></p>
<p>路函数有三个参数，分别问req，res，next<br>
req：http请求对象<br>
res：http响应<br>
next：中间件链中的下一个函数，可以根据需要制定任意数量的回调函数或一个回调函数组，并且只会按添加顺序调用。</p>
<h2 id="创建路由处理回调函数">创建路由处理回调函数</h2>
<p>除了在routes文件中定义路由的回调函数外，可以创建controller文件定义回调函数，在route文件中引用，便于管理。<br>
创建log的controller文件并创建回调函数：<br>
<img src="https://zhouhan760503.github.io/post-images/1609225708059.png" alt="" loading="lazy"><br>
在log.js文件中进行引用<br>
<img src="https://zhouhan760503.github.io/post-images/1609225772839.png" alt="" loading="lazy"><br>
由此可以通过route对controller文件的引用来获得controller的回调函数。目前请求地址为log模块下的根地址。效果如下：<br>
<img src="https://zhouhan760503.github.io/post-images/1609225871191.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>